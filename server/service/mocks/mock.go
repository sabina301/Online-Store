// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	entity "server/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthServiceImpl is a mock of AuthServiceImpl interface.
type MockAuthServiceImpl struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceImplMockRecorder
}

// MockAuthServiceImplMockRecorder is the mock recorder for MockAuthServiceImpl.
type MockAuthServiceImplMockRecorder struct {
	mock *MockAuthServiceImpl
}

// NewMockAuthServiceImpl creates a new mock instance.
func NewMockAuthServiceImpl(ctrl *gomock.Controller) *MockAuthServiceImpl {
	mock := &MockAuthServiceImpl{ctrl: ctrl}
	mock.recorder = &MockAuthServiceImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceImpl) EXPECT() *MockAuthServiceImplMockRecorder {
	return m.recorder
}

// CreateAdmin mocks base method.
func (m *MockAuthServiceImpl) CreateAdmin() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockAuthServiceImplMockRecorder) CreateAdmin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockAuthServiceImpl)(nil).CreateAdmin))
}

// GenerateToken mocks base method.
func (m *MockAuthServiceImpl) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthServiceImplMockRecorder) GenerateToken(username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthServiceImpl)(nil).GenerateToken), username, password)
}

// Login mocks base method.
func (m *MockAuthServiceImpl) Login(user entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceImplMockRecorder) Login(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceImpl)(nil).Login), user)
}

// ParseToken mocks base method.
func (m *MockAuthServiceImpl) ParseToken(token string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthServiceImplMockRecorder) ParseToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthServiceImpl)(nil).ParseToken), token)
}

// SignUp mocks base method.
func (m *MockAuthServiceImpl) SignUp(user entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthServiceImplMockRecorder) SignUp(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthServiceImpl)(nil).SignUp), user)
}

// MockUserServiceImpl is a mock of UserServiceImpl interface.
type MockUserServiceImpl struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceImplMockRecorder
}

// MockUserServiceImplMockRecorder is the mock recorder for MockUserServiceImpl.
type MockUserServiceImplMockRecorder struct {
	mock *MockUserServiceImpl
}

// NewMockUserServiceImpl creates a new mock instance.
func NewMockUserServiceImpl(ctrl *gomock.Controller) *MockUserServiceImpl {
	mock := &MockUserServiceImpl{ctrl: ctrl}
	mock.recorder = &MockUserServiceImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceImpl) EXPECT() *MockUserServiceImplMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockUserServiceImpl) GetUser(user *entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceImplMockRecorder) GetUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceImpl)(nil).GetUser), user)
}

// Test mocks base method.
func (m *MockUserServiceImpl) Test() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Test")
	ret0, _ := ret[0].(string)
	return ret0
}

// Test indicates an expected call of Test.
func (mr *MockUserServiceImplMockRecorder) Test() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockUserServiceImpl)(nil).Test))
}

// MockAdminCatalogServiceImpl is a mock of AdminCatalogServiceImpl interface.
type MockAdminCatalogServiceImpl struct {
	ctrl     *gomock.Controller
	recorder *MockAdminCatalogServiceImplMockRecorder
}

// MockAdminCatalogServiceImplMockRecorder is the mock recorder for MockAdminCatalogServiceImpl.
type MockAdminCatalogServiceImplMockRecorder struct {
	mock *MockAdminCatalogServiceImpl
}

// NewMockAdminCatalogServiceImpl creates a new mock instance.
func NewMockAdminCatalogServiceImpl(ctrl *gomock.Controller) *MockAdminCatalogServiceImpl {
	mock := &MockAdminCatalogServiceImpl{ctrl: ctrl}
	mock.recorder = &MockAdminCatalogServiceImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminCatalogServiceImpl) EXPECT() *MockAdminCatalogServiceImplMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockAdminCatalogServiceImpl) AddProduct(product entity.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockAdminCatalogServiceImplMockRecorder) AddProduct(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockAdminCatalogServiceImpl)(nil).AddProduct), product)
}

// MockProductServiceImpl is a mock of ProductServiceImpl interface.
type MockProductServiceImpl struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceImplMockRecorder
}

// MockProductServiceImplMockRecorder is the mock recorder for MockProductServiceImpl.
type MockProductServiceImplMockRecorder struct {
	mock *MockProductServiceImpl
}

// NewMockProductServiceImpl creates a new mock instance.
func NewMockProductServiceImpl(ctrl *gomock.Controller) *MockProductServiceImpl {
	mock := &MockProductServiceImpl{ctrl: ctrl}
	mock.recorder = &MockProductServiceImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductServiceImpl) EXPECT() *MockProductServiceImplMockRecorder {
	return m.recorder
}

// GetAllProducts mocks base method.
func (m *MockProductServiceImpl) GetAllProducts() ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts")
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockProductServiceImplMockRecorder) GetAllProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockProductServiceImpl)(nil).GetAllProducts))
}
